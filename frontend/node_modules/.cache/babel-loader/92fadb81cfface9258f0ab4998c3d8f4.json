{"ast":null,"code":"import '../../../../utils/index.mjs';\nimport { flattedChildren } from '../../../../utils/vue/vnode.mjs';\nimport { isVNode } from 'vue';\nconst getTabPanes = vm => {\n  const nodes = flattedChildren(vm.subTree);\n  return nodes.filter(n => {\n    var _a;\n    return isVNode(n) && ((_a = n.type) == null ? void 0 : _a.name) === \"ElTabPane\" && !!n.component;\n  });\n};\nconst getOrderedPanes = (vm, panes) => {\n  const nodes = getTabPanes(vm);\n  const uids = nodes.map(n => n.component.uid);\n  return uids.map(uid => panes[uid]).filter(p => !!p);\n};\nexport { getOrderedPanes, getTabPanes };","map":{"version":3,"mappings":";;;AACY,MAACA,WAAW,GAAIC,EAAE,IAAK;EACjC,MAAMC,KAAK,GAAGC,eAAe,CAACF,EAAE,CAACG,OAAO,CAAC;EACzC,OAAOF,KAAK,CAACG,MAAM,CAAEC,CAAC,IAAK;IACzB,IAAIC,EAAE;IACN,OAAOC,OAAO,CAACF,CAAC,CAAC,IAAI,CAAC,CAACC,EAAE,GAAGD,CAAC,CAACG,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACG,IAAI,MAAM,WAAW,IAAI,CAAC,CAACJ,CAAC,CAACK,SAAS;EACpG,CAAG,CAAC;AACJ;AACY,MAACC,eAAe,GAAG,CAACX,EAAE,EAAEY,KAAK,KAAK;EAC5C,MAAMX,KAAK,GAAGF,WAAW,CAACC,EAAE,CAAC;EAC7B,MAAMa,IAAI,GAAGZ,KAAK,CAACa,GAAG,CAAET,CAAC,IAAKA,CAAC,CAACK,SAAS,CAACK,GAAG,CAAC;EAC9C,OAAOF,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAKH,KAAK,CAACG,GAAG,CAAC,CAAC,CAACX,MAAM,CAAEY,CAAC,IAAK,CAAC,CAACA,CAAC,CAAC;AACzD","names":["getTabPanes","vm","nodes","flattedChildren","subTree","filter","n","_a","isVNode","type","name","component","getOrderedPanes","panes","uids","map","uid","p"],"sources":["../../../../../../../packages/components/tabs/src/utils/pane.ts"],"sourcesContent":["import { flattedChildren, isVNode } from '@element-plus/utils'\nimport type { ComponentInternalInstance, VNode } from 'vue'\nimport type { TabsPanes } from '../tabs'\n\nexport const getTabPanes = (vm: ComponentInternalInstance) => {\n  const nodes = flattedChildren(vm.subTree)\n  return nodes.filter(\n    (n): n is VNode =>\n      isVNode(n) && (n.type as any)?.name === 'ElTabPane' && !!n.component\n  )\n}\n\nexport const getOrderedPanes = (\n  vm: ComponentInternalInstance,\n  panes: TabsPanes\n) => {\n  const nodes = getTabPanes(vm)\n  const uids = nodes.map((n) => n.component!.uid)\n  return uids.map((uid) => panes[uid]).filter((p) => !!p)\n}\n"]},"metadata":{},"sourceType":"module"}