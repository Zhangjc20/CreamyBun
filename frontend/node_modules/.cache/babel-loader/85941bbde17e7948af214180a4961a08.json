{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, watch, provide, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { collapseProps, collapseEmits } from './collapse.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { castArray } from 'lodash-unified';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { collapseContextKey } from '../../../tokens/collapse.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCollapse\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: collapseProps,\n  emits: collapseEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"collapse\");\n    const activeNames = ref(castArray(props.modelValue));\n    const setActiveNames = _activeNames => {\n      activeNames.value = _activeNames;\n      const value = props.accordion ? activeNames.value[0] : activeNames.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(CHANGE_EVENT, value);\n    };\n    const handleItemClick = name => {\n      if (props.accordion) {\n        setActiveNames([(activeNames.value[0] || activeNames.value[0] === 0) && activeNames.value[0] === name ? \"\" : name]);\n      } else {\n        const _activeNames = [...activeNames.value];\n        const index = _activeNames.indexOf(name);\n        if (index > -1) {\n          _activeNames.splice(index, 1);\n        } else {\n          _activeNames.push(name);\n        }\n        setActiveNames(_activeNames);\n      }\n    };\n    watch(() => props.modelValue, () => activeNames.value = castArray(props.modelValue), {\n      deep: true\n    });\n    provide(collapseContextKey, {\n      activeNames,\n      handleItemClick\n    });\n    expose({\n      activeNames,\n      setActiveNames\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(ns).b()),\n        role: \"tablist\",\n        \"aria-multiselectable\": \"true\"\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n});\nvar Collapse = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/collapse/src/collapse.vue\"]]);\nexport { Collapse as default };","map":{"version":3,"mappings":";;;;;;;;;;;;mCAec;EACZA,IAAM;AACR;;;;;;;;;;IAIM,WAAKC,aAAa,UAAU;IAClC,MAAMC,WAAc,OAAIC,SAAY,OAAMC,UAAU,CAAC;IAE/C,uBAAkBC,YAAuC;MAC7DH,YAAYI,KAAQ;MACpB,MAAMA,QAAQC,KAAM,aAAYL,WAAY,OAAM,KAAKA,WAAY;MACnEM,KAAKC,oBAAoBH,KAAK;MAC9BE,KAAKE,cAAcJ,KAAK;IAAA,CAC1B;IAEM,wBAAmBN,IAA6B;MACpD,IAAIO,MAAMI,SAAW;QACJC,gBACZ,aAAYN,KAAM,OAAMJ,WAAY,OAAM,CAAO,YAClDA,WAAY,OAAM,CAAO,aACrB,EACA,QACL;MAAA,CACI;QACL,MAAMG,YAAe,IAAC,GAAGH,YAAYI,KAAK;QACpC,cAAQD,YAAa,SAAQL,IAAI;QAEvC,IAAIa,QAAQ,CAAI;UACDR,oBAAOQ,OAAO,CAAC;QAAA,CACvB;UACLR,aAAaS,KAAKd,IAAI;QAAA;QAExBY,eAAeP,YAAY;MAAA;IAC7B,CACF;IAEAU,MACE,MAAMR,MAAMH,UACZ,QAAOF,WAAY,SAAQC,SAAY,OAAMC,UAAU,GACvD;MAAEY,MAAM;IAAA,CACV;IAEAC,QAAQC,kBAAoB;MAC1BhB;MACAiB;IAAA,CACD;IAEYC;MAEXlB;MAEAU;IAAA,CACD","names":["name","useNamespace","activeNames","ensureArray","modelValue","_activeNames","value","props","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","accordion","setActiveNames","index","push","watch","deep","provide","collapseContextKey","handleItemClick","expose"],"sources":["../../../../../../packages/components/collapse/src/collapse.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\" role=\"tablist\" aria-multiselectable=\"true\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { provide, ref, watch } from 'vue'\nimport { ensureArray } from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { collapseContextKey } from '@element-plus/tokens'\nimport { collapseEmits, collapseProps } from './collapse'\nimport type { CollapseActiveName } from './collapse'\n\ndefineOptions({\n  name: 'ElCollapse',\n})\nconst props = defineProps(collapseProps)\nconst emit = defineEmits(collapseEmits)\n\nconst ns = useNamespace('collapse')\nconst activeNames = ref(ensureArray(props.modelValue))\n\nconst setActiveNames = (_activeNames: CollapseActiveName[]) => {\n  activeNames.value = _activeNames\n  const value = props.accordion ? activeNames.value[0] : activeNames.value\n  emit(UPDATE_MODEL_EVENT, value)\n  emit(CHANGE_EVENT, value)\n}\n\nconst handleItemClick = (name: CollapseActiveName) => {\n  if (props.accordion) {\n    setActiveNames([\n      (activeNames.value[0] || activeNames.value[0] === 0) &&\n      activeNames.value[0] === name\n        ? ''\n        : name,\n    ])\n  } else {\n    const _activeNames = [...activeNames.value]\n    const index = _activeNames.indexOf(name)\n\n    if (index > -1) {\n      _activeNames.splice(index, 1)\n    } else {\n      _activeNames.push(name)\n    }\n    setActiveNames(_activeNames)\n  }\n}\n\nwatch(\n  () => props.modelValue,\n  () => (activeNames.value = ensureArray(props.modelValue)),\n  { deep: true }\n)\n\nprovide(collapseContextKey, {\n  activeNames,\n  handleItemClick,\n})\n\ndefineExpose({\n  /** @description active names */\n  activeNames,\n  /** @description set active names */\n  setActiveNames,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}